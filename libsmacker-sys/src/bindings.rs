/* automatically generated by rust-bindgen 0.58.1 */

pub const SMK_DONE: i8 = 0;
pub const SMK_MORE: i8 = 1;
pub const SMK_LAST: i8 = 2;
pub const SMK_ERROR: i8 = -1;
pub const SMK_MODE_DISK: u8 = 0;
pub const SMK_MODE_MEMORY: u8 = 1;
pub const SMK_FLAG_Y_NONE: u8 = 0;
pub const SMK_FLAG_Y_INTERLACE: u8 = 1;
pub const SMK_FLAG_Y_DOUBLE: u8 = 2;
pub const SMK_AUDIO_TRACK_0: u8 = 1;
pub const SMK_AUDIO_TRACK_1: u8 = 2;
pub const SMK_AUDIO_TRACK_2: u8 = 4;
pub const SMK_AUDIO_TRACK_3: u8 = 8;
pub const SMK_AUDIO_TRACK_4: u8 = 16;
pub const SMK_AUDIO_TRACK_5: u8 = 32;
pub const SMK_AUDIO_TRACK_6: u8 = 64;
pub const SMK_VIDEO_TRACK: u8 = 128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smk_t {
    _unused: [u8; 0],
}
#[doc = " forward-declaration for an struct"]
pub type smk = *mut smk_t;
extern "C" {
    #[doc = " open an smk (from a file)"]
    pub fn smk_open_file(
        filename: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_uchar,
    ) -> smk;
}
extern "C" {
    #[doc = " read an smk (from a memory buffer)"]
    pub fn smk_open_memory(
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulong,
    ) -> smk;
}
extern "C" {
    #[doc = " close out an smk file and clean up memory"]
    pub fn smk_close(object: smk);
}
extern "C" {
    pub fn smk_info_all(
        object: smk,
        frame: *mut ::std::os::raw::c_ulong,
        frame_count: *mut ::std::os::raw::c_ulong,
        usf: *mut f64,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn smk_info_video(
        object: smk,
        w: *mut ::std::os::raw::c_ulong,
        h: *mut ::std::os::raw::c_ulong,
        y_scale_mode: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn smk_info_audio(
        object: smk,
        track_mask: *mut ::std::os::raw::c_uchar,
        channels: *mut ::std::os::raw::c_uchar,
        bitdepth: *mut ::std::os::raw::c_uchar,
        audio_rate: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn smk_enable_all(object: smk, mask: ::std::os::raw::c_uchar) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn smk_enable_video(object: smk, enable: ::std::os::raw::c_uchar)
        -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn smk_enable_audio(
        object: smk,
        track: ::std::os::raw::c_uchar,
        enable: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Retrieve palette"]
    pub fn smk_get_palette(object: smk) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    #[doc = " Retrieve video frame, as a buffer of size w*h"]
    pub fn smk_get_video(object: smk) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    #[doc = " Retrieve decoded audio chunk, track N"]
    pub fn smk_get_audio(
        object: smk,
        track: ::std::os::raw::c_uchar,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    #[doc = " Get size of currently pointed decoded audio chunk, track N"]
    pub fn smk_get_audio_size(
        object: smk,
        track: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[doc = " rewind to first frame and unpack"]
    pub fn smk_first(object: smk) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " advance to next frame and unpack"]
    pub fn smk_next(object: smk) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " seek to first keyframe before/at N in an smk"]
    pub fn smk_seek_keyframe(object: smk, frame: ::std::os::raw::c_ulong)
        -> ::std::os::raw::c_char;
}
